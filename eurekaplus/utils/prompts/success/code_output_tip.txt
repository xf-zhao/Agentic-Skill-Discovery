The output of the success function should reveal the success or not with values of either 1 or 0, respectively. Success functions are like sparse rewards that only examine the last status regarding success.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the success function code:
    (1) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor.
    (2) If there is any introduced hyper-parameters, make sure to assign them reasonable values by considering the size of objects and self-contained within the function scope. Recall the objects' actual size before your deduction.
    (3) Most importantly, only variables provided by the environment definition can be used (namely, variables of the keys of `env.obs_buf["observations"]` dict). You can only access `env` inside your function definition. Under no circumstance can you introduce new input variables.
    (4) Be sure always conclude the whole codes finally in one code blocks for later extraction.
    (5) Do not try access observations or have any variable outside the scope of sub-reward function.
    (6) Finally, configure the success discriminating function via `SuccessCfg` class as shown in the example, and make sure that the function for `func` is alreadly defined explictly.
