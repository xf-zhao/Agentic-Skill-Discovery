The output of the success function should reveal the success or not with values of either 1 or 0, respectively. Success functions are like sparse rewards that only examine the last status regarding success.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the success function code:
    (1) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor.
    (2) If there are any introduced hyper-parameters, make sure to assign them reasonable values by considering the size of objects and self-contained within the function scope. Recall the objects' actual size before your deduction.
    (3) Only variables provided by the environment definition can be used (namely, variables of the keys of `env.obs_buf["observations"]` dict). You can only access `env` inside your function definition. Under no circumstance can you introduce new input variables.
    (4) Each newly defined function should output a tensor of a shape (num_envs, ). Call `tensor.squeeze()` to convert to this shape but only when necessary.
    (5) Do not try to access observations or have any variable outside the scope of the sub-reward function.
    (6) Configure class `SuccessCfg` with the newly defined success function as shown in the signature. 
    (7) Use env.obs_buf for the current RL step observation, and env.prev_obs_buf for the previous step when necessary.
    (8) `RewTerm`, `RLTaskEnv`, and `configclass`, etc, are already defined. Do not try to import them or any other modules by yourself.