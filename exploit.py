import os
import openai
import pandas as pd
import hydra
import logging
from zero_hero.task import TaskDatabase
from zero_hero.core import (
    gpt_call,
    wrap_assistant_message,
    wrap_system_message,
    wrap_user_message,
)
from eurekaplus.utils.extract_task_code import file_to_string


ZEROHERO_ROOT_DIR = f"{os.getcwd()}"


class SkillDatabase:
    def __init__(
        self,
        store_path="skills.csv",
    ) -> None:
        self.store_path = store_path
        self.load()
        pass

    def load(self):
        store_path = self.store_path
        columns = ["skill", "priors", "reward"]
        if os.path.exists(store_path):
            df = pd.read_csv(store_path)
        else:
            os.makedirs(os.path.dirname(store_path), exist_ok=True)
            df = pd.DataFrame(columns=columns)
        self.df = df
        return self

    def absorb(self, task_database):
        skills = task_database.skills
        df = pd.DataFrame(
            {
                "skill": skills["command"],
                "priors": "",
                "variants": skills["variants"],
            }
        )
        self.df = df
        self.save()
        return

    def save(self):
        self.df.to_csv(self.store_path, index=False)
        return

    def render(self):
        df = self.df
        numbered_skills = "\n".join(
            [
                f"({i+1}) Skill: {row.skill.rstrip('.')}."
                for i, row in df.iterrows()
            ]
        )
        print(numbered_skills)
        return numbered_tasks


class Devider:
    def __init__(self, model="gpt-3.5-turbo-0125") -> None:
        self.model = model
        self.initial_sys = file_to_string(f"{self.prompt_dir}/skill/initial_sys.txt")
        self.initial_user = file_to_string(f"{self.prompt_dir}/skill/initial_user.txt")

    def run(self, task: str, skills: str):
        messages = [
            wrap_system_message(self.initial_sys.format(skills=skills)),
            wrap_user_message(self.initial_user.format(task=task)),
        ]
        resp = gpt_call(messages=messages, model=self.model, n_samples=1, temperature=0)
        return resp


class Conquerer:
    def __init__(self, subtasks) -> None:
        df = pd.DataFrame({'subtask': subtasks, 'status': 'tolearn'}) # tolearn, todo, done

    def run(self):
        pass


@hydra.main(config_path="cfg", config_name="config", version_base="1.1")
def main(cfg):
    openai.api_key = os.getenv("OPENAI_API_KEY")
    model = cfg.model
    logging.info(cfg)
    logging.info(f"Using LLM: {model}")
    env_name = cfg.env.env_name.lower()
    env_idx = f"E{cfg.seed:02d}"

    tdb = TaskDatabase(
        store_path=f'{ZEROHERO_ROOT_DIR}/envs_gpt/tasks/{env_name.replace(" ","_")}_{env_idx}.csv',
        target_num_skills=cfg.target_num_skills,
        failed_tolerance=cfg.failed_tolerance,
        proposal_batch=cfg.proposal_batch,
    )

    sdb = SkillDatabase(
        store_path=f'{ZEROHERO_ROOT_DIR}/envs_gpt/skills/{env_name.replace(" ","_")}_{env_idx}.csv',
    )
    sdb.absorb(tdb)
    pass


if __name__ == "__main__":
    main()
